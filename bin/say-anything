#!/usr/bin/env ruby

require 'say-anything'

# Display string helper
def helper

	puts %q(
Usage: say-anything [OPTION]

  -p, --play
        challenge computer at say-anything

  -t, --times [NUMBER]
        return times random words

  -a, --all
        return all words

  -h, --help
        display this help
	)

end

# Start a game against the computer
def challenge

	remaining = SayAnything.all
	remaining.shuffle!
	found = []

	puts "Good luck ! ^C to quit"

	loop do
		puts "say-anything !"
		print "    "

		begin
			word = $stdin.gets

		rescue Exception => e
			puts "\nAlready ? I still have #{remaining.size} words in stock !"
			break
		end

		# Clear space withing word
		word.gsub! /\s/, ""

		puts "\n"

		# Return nil if not found
		exist = remaining.delete word

		if exist == nil
			# Word not found !
			if found.include? word
				puts "Already said !"
			else
				puts "Sorry, doesn't exist"
			end

			puts "You loose =P"

			# Quit game
			break
		end

		# Computer turn
		ia = remaining.pop
		if ia == nil
			# Play wins O.o
			puts "You won ! How is that possible ?!"
			break
		end

		# Write computer's word
		sleep 0.4
		puts "Computer says #{ia}"

		# Can't say them anymore
		found << word
		found << ia

	end

end

if ARGV.size > 0

	# Help
	if ARGV.include? "-h" or ARGV.include? "--help"
		helper

	elsif ARGV.include? "-p" or ARGV.include? "--play"
		challenge

	# Times
	elsif ARGV.include? "-t" or ARGV.include? "--times"
		i = ARGV.index do |x| ["-t", "--times"].include?(x) end

		if ARGV[i.to_i + 1].to_i != 0
			(SayAnything.times ARGV[i.to_i + 1].to_i).each do |x|
				puts x
			end

		else
			helper

		end

	# All
	elsif ARGV.include? "-a" or ARGV.include? "--all"
		SayAnything.all.each do |x|
			puts x
		end

	# Unknow
	else
		puts "Unknow option"

	end

else
	puts SayAnything.one

end
